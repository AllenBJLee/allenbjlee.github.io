---
layout: post
title:  "내가 경험한 애자일(1) - 왜 애자일을 시작했을까?"
search: true
categories: Agile
last_modified_at: 2020-09-22T08:06:00-05:00
---

**폭포수 모델의 이해**<br>
애자일 이전에 우리가 알던 개발 방법론은 '폭포수 모델'로 대표된다고 할 수 있다.<br>
요구분석, 디자인, 개발 및 단위 테스트, 통합 및 시스템 테스트를 반복하며 문제점을 해결하는 방식이고 이 방식은 '건축공학'에서부터 비롯됐다고 배우고 있다.
<br>

{% capture notice-2 %}
#### 폭포수 모델

* 요구사항 분석
	* 시스템과 소프트웨어 디자인
		* 개발과 단위 테스트
			* 통합 및 시스템 테스트
{% endcapture %}

<div class="notice">
  {{ notice-2 | markdownify }}
</div>

하지만 '폭포수 모델'엔 단점이 존재한다. 바로 완벽한 '요구 분석'이 불가능하다는 점이다. 이 '요구 분석'이 불가능한 이유는 내 경험상 두가지로 들 수 있다.
<br>
1. 고객과의 요구사항 논의가 제대로 이루어지지 않아 미스 커뮤니케이션이 발생했을 때 <br>
* 이 경우는 그나마 고객에 명확한 요구사항이 있을경우라 개발 및 테스트 스탭에서 바로 잡아질 확률이 있다.
2. 고객이 자신의 요구사항이 뭔지 제대로 모를 때<br>
* 이 경우가 좀 심각한 경우인데 고객이 무엇을 원하는지 제대로 모를 경우이다. 이 경우는 시스템이 완성되어도 답을 찾지 못해 다시 개발해야 하는 상황까지 간다.

수많은 개발자들은 한번에 제대로 만들길 원하지만 '완벽한 요구사항 분석'이란 존재하기 힘들기 때문에 어려운 개발을 반복해야 한다고 생각한다.<br>
결국 개발자가 할 수 있는 일은 끊임없이 '요구 사항'을 확인시키는 과정이고 SI 를 하던 시절 내가 알던 PM 들이 하는 일이었다. 매일 아침 고객과의 미팅을 통해 완성된 '기능'을 고객에게 시현해가며 확인하는 작업을 반복하게 된다.<br>
이 때 고객의 요구사항이 바뀔 경우 지속적인 개발와 테스팅 및 확인이 이루어지며 결국 프로젝트 딜레이에 영향을 주게 된다.<br>
<br>

**안랩에서 경험한 개발 방법론**<br>
지금이야 팀내 애자일 프로세스가 어느정도 안착되어 위와 같은 재개발이 반복되지 않고 있지만 안랩에서의 초창기도 그닥 다르진 않았다. 그나마 다행인건 SRS를 통한 개발 명세가 있었기 때문에 최대한 명세서대로 개발하면 웬만해선 이이제기를 하지 않았다는 점이 다르긴 하다.<br>
<br>
안랩에서 경험한 개발 프로세스 전체를 논하긴 힘들지만 내 기준에서 '레거시 개발 프로세스'라고 표현할만한 방법론을 소개하면 다음과 같다.<br>

{% capture notice-3 %}
#### 레거시 개발 프로세스
* 요구사항 분석
* SRS(소프트웨어 명세서) 작성
* 기능단위 설계
* 마일스톤 단위 개발 시작
	* 개발
	* QA
{% endcapture %}

<div class="notice">
  {{ notice-3 | markdownify }}
</div>

이 모델은 생각보다 괜찮은 개발 방법론이라고 생각한다. '요구사항 분석'을 진행하고 아키텍트는 SRS 작성을 통해 고객과 개발자 모두가 이해할 수 있는 명세서가 나올때까지 SRS 를 수정하며 리뷰한다.<br>
* 개발 도중 요구사항이 바뀔 위험이 줄어들게 된다.

기능단위 설계를 통해 SRS 에 작성된 내용을 개발하기 쉽게 표현할 수 있으며 프로젝트 리더와 고객 모두가 이해할 수 있는 형태로 구체화될 수 있다.<br>
마일스톤 개발이 진행되면 개발자는 일정기간동안 개발하게되며 QA팀은 테스트를 위한 시나리오를 작성하게 된다.<br>
개발이 완료되면 QA 를 진행해 통과하지 못한 문제점을 개발자가 다시 수정해 QA 를 진행하게 된다.<br>
<br>
이론상 큰 무리 없는 개발 프로세스라고 생각한다. 하지만 여기도 문제점은 있다.<br>
1. 마지막 마일스톤에서 발생한 버그
* 아무리 열심히 개발해도 항상 성공하는 개발은 될 수 없고 QA 기간동안 발생한 문제를 다음 마일스톤에서 해결하게 된다.
* 하지만 마지막 마일스톤에 문제가 발생한다면 어떻게 될까? 이는 프로젝트 딜레이에 가장 치명적인 문제가 되며 기간이 한정된 프로젝트라면 야근으로 해결하는 수 밖에 없었다.
2. 크리티컬한 버그
* 첫 마일스톤에서 발생한 크리티컬한 버그로 전체 테스트 케이스중 일부분만 테스트할 수 있게 된다면 이후에 수행할 테스트들을 확인할 회수가 줄어들어 프로젝트를 불안하게 만드는 요소가 된다.
3. 설계 실패
* 기능단위 설계를 진행했다 하더라도 프로젝트를 진행하는 과정이 길면 설계 초안과 다른 개발이 진행되며 이는 다른 설계에 영향을 끼칠 수 밖에 없다.
4. 추가 요구 발생
* 아무리 요구분석이 완벽했다 하더라도 프로젝트 기간이 길면 생각지 못한 기능(혹은 프로젝트 인프라 추가 요구)이 발생하게 되며 마찮가지로 프로젝트 딜레이의 원인이 될 수 밖에 없다.

이런 다수의 문제점들로 인해 애자일 방법론 도임에 대한 실험을 할 수 밖에 없었고 현재는 어느정도 안착된 형태로 애자일을 수행하고 있다.<br>

**연결된 포스트**<br>
[내가 경험한 애자일(2) - 발견되는 문제점들]({{site.url}}/agile/Agile-Problem/) <br>
[내가 경험한 애자일(3) - 문제 해결하기]({{site.url}}/agile/Agile-Solution/)