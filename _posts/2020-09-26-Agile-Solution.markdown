---
layout: post
title:  "내가 경험한 애자일(3) - 문제 해결하기"
search: true
categories: Agile
last_modified_at: 2020-09-26
---

**하나씩 해결해보기**<br>
앞서 얘기한 문제점들이 발견되었고 애자일을 적용하는게 과연 올바른 것인지에 대한 의문이 생기기 시작했다.<br>
그런데 이제와서 생각해보면 이 또한 애자일 프로세스에 미숙한 개발자들이 적응하게 만들기 위한 보안장치가 있다고 생각하게 되는 증거가 되는 것 같다.<br>

**1. 애자일 프로세스의 핵심중 하나 - 회고**<br>
매 스프린트가 진행될 때 마다 데모가 끝나면 회고를 진행하게 된다.<br>
'회고' 는 애자일 프로세스를 팀내 정착시기키 위해서 정말 중요한 과정 중 하나라고 생각한다. 스크럼팀 전원이 스프린트를 진행하면서 '좋았던 것', '잘못된던 것', '개선할 것'을 찾아가며 스크럼팀을 좀 더 유동적으로 운영할 수 있는 방법을 찾아가는 과정을 말한다.

1. 그렇다고 만능은 아니었다.
* 우선 회고 자체에도 익숙치 않았기 때문에 대부분의 팀원들은 '자기반성'의 시간으로 착각하기 쉬웠다.
* 스프린트를 진행하는 동안 '내가 뭘 잘못해 일정이 딜레이 됐는가?'를 발표하는 시간처럼 변질될 수 있다.
2. 결국 스크럼 마스터가 중심을 잡고 스크럼 팀 운영에 잘못된 부분을 찾아가며 진화하는 방법이 최선이다.
* 스크럼팀은 결국 스크럼 마스터가 운영하게되고 어찌됐든 '리더'와 비슷한 역할을 수행하기 때문에 스크럼 팀 운영에서 스크럼 마스터의 결정은 상당히 중요한 요소가 된다.
* 스크럼팀 내 문제점을 파악하고 수정하려는 방향을 '회고'시간에 스크럼 마스터가 먼저 제시하게되면 스크럼 팀원들도 비슷한 경험을 토대로 '운영상의 문제점'들을 제시하기 시작한다.
<br>

**2. 그래서 찾아낸 문제점들과 보안책들**<br>
1. 데일리 미팅
* 개발자는 최대한 '한일', '할일', '장애요소'를 얘기하고 길게 논의할 필요가 있는 '이슈'는 데일리 미팅이 끝나면 관련자들이 모여 따로 논의한다.
2. 업무 분배 방식 변경
* 기능을 구현하기 전 기능 구현에 필요한 요소들(요구분석, 설계, 파일럿)을 미리 진행해 실제 개발에 필요한 시간을 최대한 예측할 수 있도록 진행해본다.
3. CI/CD 구축
* 기능을 구현하기 전 TestCase 를 QA 와 정의해 미리 적용해두면 개발자는 테스트케이스를 무조건 통과하는 Prototyping 을 미리 개발해 둔다.
* 결국 프로토타이핑 내 기능을 실제로 구현해 완성하게되면 QA기간과 관계없이 개발은 완료되게 된다.
* 이건 현재 진행중이라 내 머리속 상상에선 성공적인 모델이 될 것 같지만 악성코드를 탐지해야 하는 엔진을 개발하는 우리팀 내 현 상태론 미리 테스트케이스를 맞춰주는게 쉽진 않을 것 같다.
<br>

**3. 추가로 스크럼 마스터를 하면서 항상 생각하는 것들**<br>
1. 초기 계획과 달리 틀어지더라도 개발자들을 탓하지 말자
* 개발자들은(물론 나 자신도 포함해서) 스프린트내 할당된 이슈를 완수하기 위해 최대한 노력한다. (솔직히 노는 개발자는 없다고 생각한다.)
* 그렇더라도 기능 구현에 실패할 수 있고 뜻하지 않는 인터럽트로인해 진행이 더뎌질 수도 있다.
* 이런걸 보안하기 위해 데일리미팅을 진행하는 것이며 데일리미팅에서 진행상황을 제대로 체크하지 못하면 그건 스크럼 마스터가 미숙한거지 개발자들이 미숙한건 아닌 것 같다.
2. 데일리 미팅 외에도 지속적으로 개발자들의 진행상황을 체크하자
* 스크럼 마스터또한 개발을 같이 진행하지만 결국 스크럼 진행을 관리해야 하기 때문에 개발자들의 진행상황을 확인해야 할 필요는 있다.
* 중간 중간 개발자들의 진행 현황을 직접 찾아다니면서 얼마나 진행했는지 '실제 진척도'를 눈으로 확인해보어야 한다.
* 이건 데일리 미팅에선 확인이 불가능한 것들을 직접 보며 확인해볼 수 있는 기회가 된다.
* 가령 '개발 목표'를 아무리 상세하게 적었더라도 개발자가 이해한 목표A 와 요구사항을 제시한 제시자(스크럼 마스터, 아키텍트, 혹은 팀장)의 목표 B 는 같은 '개발 목표'를 보더라도 다를 수 있기 때문이다.
* 직접 보면서 '개발 목표'가 의도대로 진행됐는지 확인하는 것은 중요한 요소이다.
3. 미숙한 부분을 지적하지 말고 다음 스프린트 목표로 잡자
* 직접 확인했을 때 발생하는 '개발 목표' 미스 커뮤니케이션으로 발생한 '빠진 목표'를 지적하기보단 팩트를 얘기하는게 좋다.
* 가장 중요한 포인트는 의사소통인데 개발자에게 원래 '개발 목표'를 최대한 다시 이해시키고 그중 빠진 부분을 '이슈'로 생성해 다시 관리될 수 있도록 지정한다.
* 이건 개발자가 지금까지 노력해 개발한 내용에 대한 Blame 이 아니라 '목표'에 대한 미스 커뮤니케이션임을 인지시키는게 중요하다.
* 개발 내용에 대한 Blame 이 될 경우 개발자는 힘이 빠질 수 밖에 없다.
4. 데모를 활용하자.
* 데모는 개발자가 개발한 모든 내용을 요구사항을 제시한 제시자에게 '우리 이만큼 잘 했으니 와서 칭찬해주면 좋겠다' 라고 자랑스럽게 표현한 수 있는 표현의 장이 되어야 한다.
* 작은 기능 같아보여도 '최대한 있어보이게' 잘 포장해서 표현해준다면 모두가 즐거운 데모가 될 것 이라고 생각한다.
<br>

**아직도 해결해보고 싶은 것은 많다.**<br>
아직도 해결하고 싶은 것은 많다. CI/CD 도 아직 완벽하진 않고, 업무 분담도 아직 완벽하진 않은 것 같다. 애자일이 모든 팀마다 동일한 형태의 프로세스를 가질 수는 없다고 생각하기에 우리 스크럼팀에 최대한 맞는 방법을 적용해보고 싶고 언젠가 기회가 된다면 Scaling Agile 같이 규모가 큰 애자일도 접해보고 싶다.<br>
그래도 6년이란 시간동안 애자일 프로세스를 접하면서 기록을 해두는게 좋을 것 같아 적어본다.

**연결된 포스트**<br>
[내가 경험한 애자일(1) - 왜 애자일을 시작했을까?]({{site.url}}/agile/Agile-Start/) <br>
[내가 경험한 애자일(2) - 발견되는 문제점들]({{site.url}}/agile/Agile-Problem/)